// 将创建实例进行了封装，保证每个实例的独立封装性
import { createApp } from 'vue'
import App from './App.vue'

// mount 设置挂载点 #app (id为app的盒子)
createApp(App).mount('#app')

/*
watch函数
作用: 侦听一个或者多个数据的变化，数据变化时执行回调函数
俩个额外参数：1. immediate（立即执行） 2. deep（深度侦听）

immediate
说明：在侦听器创建时立即触发回调, 响应式数据变化之后继续执行回调
deep
默认机制：通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep选项

精确侦听对象的某个属性
需求：在不开启deep的前提下，侦听age的变化，只有age变化时才执行回调

1. 作为watch函数的第一个参数，ref对象需要添加.value吗？
  不需要，第一个参数就是传 ref 对象
2. watch只能侦听单个数据吗？
  单个 或者 多个
3. 不开启deep，直接监视 复杂类型，修改属性 能触发回调吗？
  不能，默认是浅层侦听
4. 不开启deep，精确侦听对象的某个属性？
  可以把第一个参数写成函数的写法，返回要监听的具体属性
  () => {xxx}
*/